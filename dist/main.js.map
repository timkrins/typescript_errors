{"mappings":"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","sources":["src/main.ts"],"sourcesContent":["#!/usr/bin/env node\n\nimport * as fs from 'fs';\nimport { createRequire } from 'module';\nimport * as path from 'path';\nimport type typescript from 'typescript';\nimport winston from 'winston';\n\nconst logger = winston.createLogger({\n  level: 'info',\n  transports: [\n    new winston.transports.Console({\n      format: winston.format.combine(winston.format.colorize(), winston.format.simple()),\n    }),\n  ],\n  handleExceptions: true,\n});\n\nconst startTime = process.hrtime();\n\nconst projectFileEnv = process.env['TSCONFIG'];\nif (!projectFileEnv) {\n  throw new Error(`TSCONFIG env not found.`);\n}\n\nconst projectFile = path.resolve(projectFileEnv);\nif (!fs.existsSync(projectFile)) {\n  throw new Error(`Project file not found: ${projectFile}`);\n}\n\nlogger.info(`Using project file: ${projectFile}`);\n\nlet extraConfig: typescript.ParsedCommandLine['options'] = {};\nconst extraConfigEnv = process.env['EXTRA_CONFIG'];\nif (extraConfigEnv) {\n  extraConfig = JSON.parse(extraConfigEnv);\n}\n\nlogger.info(`Using extra config: ${JSON.stringify(extraConfig)}`);\n\nconst outputFileEnv = process.env['OUTPUT'];\nif (!outputFileEnv) {\n  throw new Error(`OUTPUT env not found.`);\n}\n\nconst outputFile = path.resolve(outputFileEnv);\n\nlogger.info(`Using output file: ${outputFile}`);\n\nconst projectBase = path.dirname(projectFile);\nconst ts: typeof typescript = createRequire(projectFile)('typescript');\n\nlogger.info(`Using project base: ${projectBase}`);\nlogger.info(`Using TS version: ${ts.version}`);\n\nconst config = ts.parseJsonConfigFileContent(\n  ts.readConfigFile(projectFile, ts.sys.readFile).config,\n  ts.sys,\n  path.dirname(projectFile),\n  undefined,\n  path.basename(projectFile),\n);\n\nconfig.options = {\n  ...config.options,\n  sourceMap: false,\n  emitDecoratorMetadata: false,\n  skipLibCheck: true,\n  skipDefaultLibCheck: true,\n  ...extraConfig,\n};\n\nconst host = ts.createCompilerHost(config.options);\nlogger.info(`Using in-memory compilation`);\n\n// do absolutely nothing with the file\nhost.writeFile = (_fileName: string, _ignoredResult: string) => {};\n\nconst program = ts.createProgram({\n  rootNames: config.fileNames,\n  options: config.options,\n  projectReferences: config.projectReferences,\n  configFileParsingDiagnostics: ts.getConfigFileParsingDiagnostics(config),\n  host,\n});\n\nlogger.info(`Compiling...`);\nconst emitResult = program.emit();\nlogger.info(`Compile finished.`);\nconst allDiagnostics = ts.getPreEmitDiagnostics(program).concat(emitResult.diagnostics);\n\nconst relevantDiagnostics = allDiagnostics.filter(({ file }) => {\n  return file && file.fileName.includes(projectBase);\n});\nlogger.info(`Parsing diagnostics`);\nconst diagnostics = relevantDiagnostics.map((diagnostic) => {\n  if (diagnostic.file) {\n    const { fileName } = diagnostic.file;\n    let { line, character } = ts.getLineAndCharacterOfPosition(diagnostic.file, diagnostic.start!);\n    line += 1;\n    character += 1;\n\n    const message = ts.flattenDiagnosticMessageText(diagnostic.messageText, '\\n');\n    return { fileName, line, character, message };\n  }\n});\n\nconst json: Record<string, string> = {};\ndiagnostics.forEach((diag) => {\n  if (diag) {\n    const relativeFileName = diag.fileName.replace(`${projectBase}/`, '');\n    const link = `${relativeFileName}:${diag.line}:${diag.character}`;\n    json[link] = diag.message;\n  }\n});\n\nlogger.info(`Writing output file: ${outputFile}`);\nfs.writeFileSync(outputFile, JSON.stringify(json, null, 2));\n\nconst [seconds, nanoSeconds] = process.hrtime(startTime);\nconst milliseconds = Math.round(nanoSeconds / 1000000);\n\nlogger.info(`Took ${seconds}.${milliseconds} seconds`);\n"],"names":[],"version":3,"file":"main.js.map","sourceRoot":"../"}